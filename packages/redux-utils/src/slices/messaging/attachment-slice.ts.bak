import { createSlice } from "@reduxjs/toolkit";
import type { PayloadAction } from "@reduxjs/toolkit";
import { Conversation } from "@twilio/conversations";

export type AttachmentsState = {
  [p: string]: { [p: string]: Record<string, Blob> };
};

const initialState: AttachmentsState[] = [];

type AddAttachmentPayload = {
  channelSid: string;
  messageSid: string;
  mediaSid: string;
  attachment: Blob;
};

type ClearAttachmentPayload = {
  channelSid: string;
  messageSid: string;
};

export const attachmentSlice = createSlice({
  name: "attachment",
  initialState,
  reducers: {
    addAttachment: (state, action: PayloadAction<AddAttachmentPayload>) => {
      const { channelSid, messageSid, mediaSid, attachment } = action.payload;
      state[channelSid] = state[channelSid] ?? {};
      state[channelSid][messageSid] = state[channelSid][messageSid] ?? {};

      return {
        ...state,
        [channelSid]: {
          ...(state[channelSid] || {}),
          [messageSid]: Object.assign(state[channelSid][messageSid], {
            [mediaSid]: attachment,
          }),
        },
      };
    },

    clearAttachments: (
      state,
      action: PayloadAction<ClearAttachmentPayload>,
    ) => {
      const { channelSid, messageSid } = action.payload;

      return {
        ...state,
        [channelSid]: {
          ...(state[channelSid] || {}),
          [messageSid]: {},
        },
      };
    },
  },
});

// Action creators are generated for each case reducer function
export const { addAttachment, clearAttachments } = attachmentSlice.actions;

export default attachmentSlice.reducer;
